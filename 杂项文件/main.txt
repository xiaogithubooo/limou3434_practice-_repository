//数组名的意义
//sizeof(数组名)，这里的数组名表示整个数组，计算的是整个数组的大小
//& 数组名。这里的数组名表示整个数组。取出的是整个数组的地址
//除此之外所有的数组名都表示首元素的地址
//sizeof只会计算分配空间的大小
//int main()
//{
// char arr[] = {'a','b','c','d','e','f'};
// printf("%d\n", sizeof(arr));
//// sizeof（数组名）：整个数组的大小，6个字节
// printf("%d\n", sizeof(arr+0));   
////  数组首元素地址，地址是编号，大小为4/8个字节
// printf("%d\n", sizeof(*arr)); 
//// 不是只有arr（数组名）放在里面  取地址*arr是首元素的大小，计算的是首元素的大小
//// 字节为1
// printf("%d\n", sizeof(arr[1])); 
//// 数组的第二个元素大小，1个字节
// printf("%d\n", sizeof(&arr)); 
//// 取出整个数组的地址，4/8
// printf("%d\n", sizeof(&arr+1));
////4个字节
//// &数组名：取出整个数组的地址，+1：跳过整个数组后的地址，依旧是地址
//// sizeof不会真的去访问地址，
// printf("%d\n", sizeof(&arr[0]+1)); 
// //取出第一个元素的地址，+1第二个元素的地址   4/8
// return 0;
//}
//
//      int main() 
//{
//char arr[] = { "abcdef" };
//printf("%d\n", sizeof(arr));
////只有数组名，表示整个数组的大小
////数组的大小，7个元素，7个字节
//printf("%d\n", sizeof(arr + 0));   
////arr数组名不是单独放在括号里面，表示数组首元素的地址
////地址是编号，4/8个字节
//printf("%d\n", sizeof(*arr)); 
////arr数组名不是单独放在括号里面
////arr数组首元素的地址 *arr是首元素，计算的是首元素的大小：char类型：1个字节
//printf("%d\n", sizeof(arr[1])); 
////数组的第二个元素大小，1个字节
//printf("%d\n", sizeof(&arr)); 
////&取地址数组名，取出数组的地址，4/8
//printf("%d\n", sizeof(&arr + 1));
////跳过整个数组后仍然是地址，大小为4/8字节
//printf("%d\n", sizeof(&arr[0] + 1));
////4/8  &arr[0]:数组首元素的地址 +1:下一个元素的地址  
//printf("%d\n", strlen(arr));
////6个字节
////数组名表示数组首元素地址 
////传入一个数组名的时候，strlen默认在数组起始位置开始统计，到\0结束
//printf("%d\n", strlen(arr +  0));
////6个字节
////数组名表示数组首元素地址  +0：依旧是数组首元素的地址传给strlen作为起始位置
//
////printf("%d\n", strlen(*arr));
////传给str字符‘a’=97,代码是有问题的，str把97当作地址
////这一块地址不是arr的，把地址传给str，strlen要访问地址找到起始位置
////会形成非法访问 err
//
////printf("%d\n", strlen(arr[1])); 
////把字符‘b’=98当作地址，形成非法访问，err
//
//
//
//printf("%d\n", strlen(&arr));
////6
////取出的是整个数组的地址 类型应该是指针类型  数组指针char (*)[7]
////strlen的类型是const char*类型 
////但传给Str就把数组首元素地址当作起始位置
//
//printf("%d\n", strlen(&arr + 1));
////&数组名：表示整个数组，取出的是整个数组的地址   
////随机值 跳过一个数组，从数组末尾开始数，随机值-6
//printf("%d\n", strlen(&arr[0] + 1));
////从b到\0大小为5个字节
//return 0;
//}  
//
//
